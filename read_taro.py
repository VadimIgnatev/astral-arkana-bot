# This script is designed to work in standard Python environments.
# It does not require `micropip`, which is specific to Pyodide or web-based sandboxes.

import asyncio
import logging
from datetime import datetime
import os
import json
from dotenv import load_dotenv

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# üîê –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üóùÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ credentials.json —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—é–¥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
CREDENTIALS_JSON = os.getenv("CREDENTIALS_JSON")
if CREDENTIALS_JSON:
    with open("credentials.json", "w") as f:
        f.write(CREDENTIALS_JSON)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ read_taro,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—Ä—É–≥–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from read_taro import get_random_cards, get_spread_text, data

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)

dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_last_spread = {}
user_last_text = {}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
def get_main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíû –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="spread:love")],
        [InlineKeyboardButton(text="‚òÄÔ∏è –î–µ–Ω—å", callback_data="spread:day")],
        [InlineKeyboardButton(text="üéØ –î–∞ / –ù–µ—Ç", callback_data="spread:yes_no")]
    ])
    return kb

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–æ–º
def get_post_spread_buttons(text_to_share=None):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="repeat")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back")],
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–∫–ª–∞–¥–æ–º", switch_inline_query=text_to_share or "")]
    ])

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ

def get_tarot_response(spread_type: str) -> str:
    cards = get_random_cards(spread_type)
    interpretation = get_spread_text(spread_type, cards)
    return interpretation

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@dp.message(F.text == "/help")
async def help_command(message: Message):
    await message.answer(
        """‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è AstralArkanaBot:*

1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Äî –ª—é–±–æ–≤—å, –¥–µ–Ω—å –∏–ª–∏ –¥–∞/–Ω–µ—Ç.
2. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –∫–∞—Ä—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
3. –¢—ã –ø–æ–ª—É—á–∏—à—å –≤–æ–ª—à–µ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç AI-—Ç–∞—Ä–æ–ª–æ–≥–∞.
4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–æ–º: –ø–æ–≤—Ç–æ—Ä, –Ω–∞–∑–∞–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.

üîÆ *–ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —à—ë–ø–æ—Ç—É –∫–∞—Ä—Ç ‚Äî –æ—Ç–≤–µ—Ç—ã —É–∂–µ —Ä—è–¥–æ–º.*"""
    )

# –ö–æ–º–∞–Ω–¥–∞ /about
@dp.message(F.text == "/about")
async def about_command(message: Message):
    await message.answer(
        "üß† *AstralArkanaBot* ‚Äî —ç—Ç–æ AI-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ —Å–ª–∏—è–Ω–∏–∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –û–Ω —á–∏—Ç–∞–µ—Ç –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å —Å–µ–±—è."
    )

# –ö–æ–º–∞–Ω–¥–∞ /contact
@dp.message(F.text == "/contact")
async def contact_command(message: Message):
    await message.answer(
        "üì© –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é ‚Äî –Ω–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä—É: [@key_bot_studio](https://t.me/key_bot_studio)"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query(F.data == "contact_info")
async def handle_contact_info(callback: CallbackQuery):
    await callback.message.answer(
        "üì© –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é ‚Äî –Ω–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä—É: [@key_bot_studio](https://t.me/key_bot_studio)"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
@dp.message(CommandStart())
async def start(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")

    hour = datetime.now().hour
    if 5 <= hour < 12:
        greeting = "üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≤ AstralArkanaBot!*"
    elif 12 <= hour < 18:
        greeting = "üåû *–°–≤–µ—Ç–ª–æ–≥–æ –¥–Ω—è –≤ AstralArkanaBot!*"
    else:
        greeting = "üåô *–í–µ—á–µ—Ä –¥–æ–±—Ä—ã–π, –∏—Å–∫–∞—Ç–µ–ª—å —Ç–∞–π–Ω...*"

    await message.answer_photo(
        photo=types.FSInputFile("images/start_illustration.jpg"),
        caption=(
            f"{greeting} ‚ú®\n\n"
            "üÉè *–ö–∞—Ä—Ç—ã –∑–Ω–∞—é—Ç –±–æ–ª—å—à–µ, —á–µ–º —Å–ª–æ–≤–∞.*\n"
            "ü§ñ _–Ø ‚Äî —Ä–∞–∑—É–º, —Ä–æ–∂–¥—ë–Ω–Ω—ã–π –∏–∑ –º–∞–≥–∏–∏ –∏ –∫–æ–¥–∞._\n\n"
            "üîª –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:"
        ),
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ inline-–∫–Ω–æ–ø–∫–∞–º
@dp.callback_query(F.data.startswith("spread:"))
async def handle_spread_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    spread_type = callback.data.split(":"[1])
    user_last_spread[user_id] = spread_type

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–∞—Å–∫–ª–∞–¥: {spread_type}")

    loading = await callback.message.answer("üîÆ –†–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –∫–∞—Ä—Ç—ã... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
    text = get_tarot_response(spread_type)
    user_last_text[user_id] = text

    await bot.edit_message_text(
        text=text,
        chat_id=loading.chat.id,
        message_id=loading.message_id,
        reply_markup=get_post_spread_buttons(text)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
@dp.callback_query(F.data == "repeat")
async def handle_repeat(callback: CallbackQuery):
    user_id = callback.from_user.id
    spread_type = user_last_spread.get(user_id)

    if not spread_type:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞.", show_alert=True)
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ä–∞—Å–∫–ª–∞–¥: {spread_type}")

    loading = await callback.message.answer("üîÅ –ï—â—ë –æ–¥–∏–Ω —Ä–∞—Å–∫–ª–∞–¥...")
    text = get_tarot_response(spread_type)
    user_last_text[user_id] = text

    await bot.edit_message_text(
        text=text,
        chat_id=loading.chat.id,
        message_id=loading.message_id,
        reply_markup=get_post_spread_buttons(text)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É")
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "üîª –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
@dp.message()
async def fallback_handler(message: Message):
    await message.answer(
        "üîç –Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏.\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ –Ω–∞–∂–º–∏ /start üòä"
    )

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.set_my_commands([
        types.BotCommand(command="start", description="üîÆ –ù–∞—á–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥"),
        types.BotCommand(command="help", description="‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
        types.BotCommand(command="about", description="üß† –û –±–æ—Ç–µ"),
        types.BotCommand(command="contact", description="üì© –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    ])
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ AstralArkanaBot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
